// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/nuea/backend-golang-test/cmd/http/internal/handler"
	"github.com/nuea/backend-golang-test/cmd/http/internal/handler/user"
	"github.com/nuea/backend-golang-test/cmd/http/internal/server"
	"github.com/nuea/backend-golang-test/internal/client"
	"github.com/nuea/backend-golang-test/internal/client/backendgolangtest"
	"github.com/nuea/backend-golang-test/internal/client/mongodb"
	"github.com/nuea/backend-golang-test/internal/config"
	"github.com/nuea/backend-golang-test/internal/di"
)

// Injectors from di.go:

func InitContainer() (*Container, func(), error) {
	appConfig := config.ProvideCofig()
	mongoDB, cleanup, err := mongodb.ProvideMongoDBClient(appConfig)
	if err != nil {
		return nil, nil, err
	}
	apiClient := backendgolangtest.ProvideBackendGolangTestServiceGRPC(appConfig)
	userServiceClient := backendgolangtest.ProvideBackendGolangTestServiceClient(apiClient)
	backendGolangTestGRPCService := &backendgolangtest.BackendGolangTestGRPCService{
		UserServiceClient: userServiceClient,
	}
	clients := &client.Clients{
		MongoDB:                      mongoDB,
		BackendGolangTestGRPCService: backendGolangTestGRPCService,
	}
	userHandler := user.ProvideUserHandler(clients)
	handlers := &handler.Handlers{
		UserHandler: userHandler,
	}
	httpServer := server.ProvideHTTPServer(appConfig, handlers, clients)
	container := &Container{
		server: httpServer,
	}
	return container, func() {
		cleanup()
	}, nil
}

// di.go:

var MainSet = wire.NewSet(di.InternalSet, ProviderSet, handler.HandlerSet, wire.Struct(new(Container), "*"))
