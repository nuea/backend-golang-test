// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/nuea/backend-golang-test/cmd/grpc/internal/handler"
	"github.com/nuea/backend-golang-test/cmd/grpc/internal/handler/auth"
	user2 "github.com/nuea/backend-golang-test/cmd/grpc/internal/handler/user"
	"github.com/nuea/backend-golang-test/cmd/grpc/internal/server"
	"github.com/nuea/backend-golang-test/internal/client"
	"github.com/nuea/backend-golang-test/internal/client/backendgolangtest"
	"github.com/nuea/backend-golang-test/internal/client/mongodb"
	"github.com/nuea/backend-golang-test/internal/config"
	"github.com/nuea/backend-golang-test/internal/di"
	"github.com/nuea/backend-golang-test/internal/repository"
	"github.com/nuea/backend-golang-test/internal/repository/user"
)

// Injectors from di.go:

func InitContainer() (*Container, func(), error) {
	appConfig := config.ProvideCofig()
	mongoDB, cleanup, err := mongodb.ProvideMongoDBClient(appConfig)
	if err != nil {
		return nil, nil, err
	}
	apiClient := backendgolangtest.ProvideBackendGolangTestServiceGRPC(appConfig)
	userServiceClient := backendgolangtest.ProvideUserServiceClient(apiClient)
	authServiceClient := backendgolangtest.ProvideAuthServiceClient(apiClient)
	backendGolangTestGRPCService := &backendgolangtest.BackendGolangTestGRPCService{
		UserServiceClient: userServiceClient,
		AuthServiceClient: authServiceClient,
	}
	clients := &client.Clients{
		MongoDB:                      mongoDB,
		BackendGolangTestGRPCService: backendGolangTestGRPCService,
	}
	userRepository := user.ProvideUserRepository(clients)
	repositoryRepository := &repository.Repository{
		UserRepository: userRepository,
	}
	userServiceServer, err := user2.ProvideUserGRPCService(repositoryRepository)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authServiceServer, err := auth.ProvideAuthGRPCService(repositoryRepository)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	grpcServices := &handler.GrpcServices{
		UserServiceServer: userServiceServer,
		AuthServiceServer: authServiceServer,
	}
	grpcServer := server.ProvideGRPCServer(appConfig, grpcServices)
	container := &Container{
		server: grpcServer,
	}
	return container, func() {
		cleanup()
	}, nil
}

// di.go:

var MainSet = wire.NewSet(di.InternalSet, ProviderSet, handler.HandlerSet, wire.Struct(new(Container), "*"))
